class ParkingLot
{
	List<Floor> list;
	
	ParkingAttendee alloteParkingAttendee(Floor floor , ParkingAttendee attendee) {}
	ParkingAttendee removeParkingAttendee(Floor floor , ParkingAttendee attendee) {}
	ParkingAttendee changeParkingAttendee(Floor floor , ParkingAttendee attendee) {}
}

class Floor
{
	int floorId;
	List<Parking> parking;
	List<ParkingAttendee> attendee;
}

class Parking
{
	int parking Id;
	ParkingType parkingType;
	ParkingStatus parkingStatus;
	Vehicle vehicle;
}

enum ParkingType
{
	TWO_WHEELER,
	FOUR_WHEELER,
	OTHER,
	EMPLOYEE_PARKING
}

enum ParkingStatus
{
	AVAILABLE,
	RESERVED,
	OCCUPIED,
	UNDER_MAINTAINANCE
}

class Vehicle
{
	int vehicleID;
	String vehicleNumber;
	String ownerName;
	TimeStamp inTime;
	TimeStamp outTime;
	Bill bill;
	Payment payment;
}


class User
{
	int userId;
	String userName;
	int userSecurityNumber;
	Address address;
}

class Address
{
	int addressId;
	String streetName;
	String location; 
	String city;
	String state;
	int zip;
}

class Admin extends User
{
	Floor addFloor(Floor floor) {}
	Floor removeFloor(Floor floor){}
	Floor removeParking(Floor floor , int parkingId) {}
}

class ParkingAttendee extends User
{
	Vehicle parkVehicle(Vehicle vehicle) {}
	Vehicle removeVehicle(Vehicle vehicle) {}
}

class Bill
{
	int billId;
	Vehicle vehicle;
	PaymentType;
	Timestamp paymentType;
}

class Payment
{
	int paymentId;
	double amount;
	PaymentStatus paymentStatus;
	PaymentDetails paymentDetails;
	
	double calculateAmount(Vehicle vehicle) {}
}

class PaymentDetails
{
	Vehicle vehicle;
	PaymentType paymentType;
	String paymentSource;
	TimeStamp time;
}

enum PaymentType
{
	CARD,
	CASH,
	UPI,
	FASTTRACK
}

enum PaymentStatus
{
	PENDING,
	COMPLETED,
	WAITING,
	REJECTED
}